/*
First time? Check out the tutorial game:
https://sprig.hackclub.com/gallery/getting_started

@title: Bike Mayhem
@author: Eddie B
@tags: [bike]
@addedOn: 2024-00-00
*/

const player = "p"
const obstacle_block = 'b'
const wall = 'w'
const speed_boost = 's'
const player_speed = 'e'
const barrel = "a"
const slowdown = "d"
const speedup = "u"

let game = true
let level_difficulty = 0
let game_start = true
let timeout = 1000
var death_blocks = []
var powerup_speed = []
var barrel_block = []
var immunity = false
var countdown = 10
var speedboost = false
var boost = ""


for (let key in death_blocks) {
    addText(key, {
        x: 2,
        y: 4,
        color: color`0`
    });
  }

setLegend(
  [ player_speed, bitmap`
................
................
.......666......
.......666......
.......666......
........L.......
.......666......
......36663.....
......36663.....
......3CLC3.....
......6.L.6.....
.......666......
.......666......
.......666......
................
................` ],
  [ player, bitmap`
................
................
.......000......
.......000......
.......000......
........L.......
.......000......
......50005.....
......50005.....
......57L75.....
......0.L.0.....
.......000......
.......000......
.......000......
................
................` ],
  [ barrel, bitmap`
................
................
................
................
................
.....CFCCFC.....
.....CFCCFC.....
.....CFCCFC.....
.....CFCCFC.....
.....CFCCFC.....
.....CFCCFC.....
................
................
................
................
................` ],
  [ slowdown, bitmap`
................
................
................
................
................
.....88HH88.....
.....88HH88.....
.....88HH88.....
.....HHHHHH.....
.....8HHHH8.....
.....88HH88.....
................
................
................
................
................` ],
  [ speedup, bitmap`
................
................
................
................
................
.....HH88HH.....
.....H8888H.....
.....888888.....
.....HH88HH.....
.....HH88HH.....
.....HH88HH.....
................
................
................
................
................` ],
  [ obstacle_block, bitmap`
................
................
................
................
................
.....933339.....
.....393393.....
.....339933.....
.....339933.....
.....393393.....
.....933339.....
................
................
................
................
................`],
  [ wall, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [ speed_boost, bitmap`
8888888888888888
8888888668888888
8888886666888888
8888866666688888
8888866666688888
8666666666666668
8666666666666668
8666666666666668
8866666666666688
8886666666666888
8866666666666688
8666666666666668
8666688888866668
8668888888888668
8688888888888868
8888888888888888`]
)

setSolids([
  player, wall, barrel
])

let level = 0
const levels = [
  map`
wwwwwww
...p...
.......
.......
.......
.......
wwwwwww`
]

setMap(levels[level])

setPushables({
  [ player ]: [barrel]
})

function pushObstacleSpritesUp() {
  getAll(obstacle_block).forEach(sprite => {
    sprite.y -= 1;
    if (sprite.y === 0) {
      sprite.remove()
    }
  });

  getAll(speed_boost).forEach(sprite => {
    sprite.y -= 1;
    if (sprite.y === 0) {
      sprite.remove()
    }
  });
  
  getAll(slowdown).forEach(sprite => {
    sprite.y -= 1;
    if (sprite.y === 1) {
      sprite.remove()
    }
  });

  getAll(speedup).forEach(sprite => {
    sprite.y -= 1;
    if (sprite.y === 1) {
      sprite.remove()
    }
  });
  
  checkCollision()
  getAll(barrel).forEach(sprite => {
    sprite.y -= 1;
    if (sprite.y === 1) {
      sprite.remove()
    }
  });
  
  
  for (let i = 0; i < death_blocks.length; i++) {
    if (death_blocks[i]) {
      let [x, y] = death_blocks[i];
      death_blocks[i] = [x, y -1];
    }
  }

}

function dictCount(dict) {
  let h = 0;
  for (let i in dict) {
    h++
  }
  return h
}

function gameover() {
  game = false
  clearText()

  let score = dictCount(death_blocks)
  addText("u ded", {
        x: 7,
        y: 4,
        color: color`1`
    });
  addText("score:" + score, {
        x: 6,
        y: 5,
        color: color`1`
    });

}


function speedBoostCountdown() {
  if (countdown > 0) { 
    speedboost = true
    addText("Immune for", {
          x: 5,
          y: 4,
          color: color`1`
      });
    addText(countdown + " seconds", {
          x: 6,
          y: 5,
          color: color`1`
      });
    countdown--
    setTimeout(speedBoostCountdown, 1000)
  } else {
    countdown = 10
    clearText()
    speedboost = false

    // ending speed boost
    timeout += 200
    immunity = false
    getAll(player_speed).forEach(sprite => {
      sprite.remove()
    })
  }
}

function speedBoost() {
  if (!speedboost) {
    timeout -= 200
    immunity = true
    
    addSprite(getFirst(player).x, getFirst(player).y, player_speed)
    speedBoostCountdown()
  }
  boost = "speed boost"
}

function slowdown_all() {
  timeout += 200

  addText("Slowdown", {
        x: 5,
        y: 4,
        color: color`1`
    });
  boost = "slow"
}
  
function speedup_all() {
  timeout -= 200

  addText("Speedup", {
        x: 5,
        y: 4,
        color: color`1`
    });
  boost = "speed"
}
  

function checkCollision() {
  playerx = getFirst(player).x
  playery = getFirst(player).y

  // for (let i in death_blocks) {
  //   blockx = death_blocks[i][0]
  //   blocky = death_blocks[i][1]
  //   if (!immunity) {
  //     if (blockx === playerx && blocky === playery) return gameover()
  //   }
  //   getAll(barrel).forEach(sprite => {
  //     if (sprite.x === blockx && sprite.y === blocky) {
  //       // sprite.remove()
  //       delete death_blocks[i]
  //       clearTile(sprite.x, sprite.y)
  //     }
  //   });
  // }
  getAll(obstacle_block).forEach(death => {
    blockx = death.x
    blocky = death.y
    if (!immunity) {
      if (blockx === playerx && blocky === playery) return gameover()
    }
    getAll(barrel).forEach(sprite => {
      if (sprite.x === blockx && sprite.y === blocky) {
        // delete death_blocks[i]
        clearTile(sprite.x, sprite.y)
      }
    });
  })
  // for (let i in death_blocks) {
  //   blockx = death_blocks[i][0]
  //   blocky = death_blocks[i][1]
  //   if (!immunity) {
  //     if (blockx === playerx && blocky === playery) return gameover()
  //   }
  //   getAll(barrel).forEach(sprite => {
  //     if (sprite.x === blockx && sprite.y === blocky) {
  //       // sprite.remove()
  //       delete death_blocks[i]
  //       clearTile(sprite.x, sprite.y)
  //     }
  //   });
  // }
  
  getAll(speed_boost).forEach(sprite => {
    if (sprite.x === playerx && sprite.y === playery) {
      sprite.remove()
      return speedBoost()
    }
  });
  
  getAll(slowdown).forEach(sprite => {
    if (sprite.x === playerx && sprite.y === playery) {
      sprite.remove()
      return slowdown_all()
    }
  });
  
  getAll(speedup).forEach(sprite => {
    if (sprite.x === playerx && sprite.y === playery) {
      sprite.remove()
      return speedup_all()
    }
  });
  
  return false  
}

function tick() {
  if (game) {
    checkLevel()
    let random_num = Math.floor(Math.random() * 7)
    random_boost = Math.floor(Math.random() * 8)
    let id = dictCount(death_blocks)

    if (getAll(player_speed) == 0) {
        immunity = false
    }

    // display boost
    addText(boost, {
      x: 1,
      y: 14,
      color: color`1`
    })
    
    // adding blocks
    let xy = [random_num, 6]
    // getAll(death_blocks).forEach(sprite => {
    //   sprite.type = "s"
    // })

    if (random_boost == 1) {
      const objects_list = ["speed", "slowdown", "speedup", "barrel"]
      const item = objects_list[Math.floor(Math.random() * objects_list.length)];
  
  
      switch(item) {
        case "speed":
          if (speedboost) {
            addSprite(random_num, 6, slowdown)
            barrel_block[id] = xy;
            break
          } else {
            addSprite(random_num, 6, speed_boost)
            powerup_speed[id] = xy;
            break
          }
        case "slowdown":
          addSprite(random_num, 6, slowdown)
          // barrel_block[id] = xy;
          break
        case "speedup":
          addSprite(random_num, 6, speedup)
          // barrel_block[id] = xy;
          break
        case "barrel":
          addSprite(random_num, 6, barrel)
          barrel_block[id] = xy;
          break
      }
    } else {
      addSprite(random_num, 6, obstacle_block)
      death_blocks[id] = xy;
    }

  
    // scootching all blocks upwards
    pushObstacleSpritesUp();
    
    checkCollision()
    
    let h = true
    setTimeout(tick, timeout);
  }
}


let one = true
let two = true
let three = true
let four = true
function checkLevel() {
  // 1: 20
  // 2: 40
  // 3: 60
  // 4: 80
  // 5: 100
  
  let game_blocks = dictCount(death_blocks)
  if (game_blocks <= 20) {
    if (one) {
      level_difficulty = 1  
      timeout = 1000
      addText("Level 1", {
        x:6,
        y:6,
        color: color`0`
      })
      one = false
    } else {
      clearText()
    }
  } else if (game_blocks > 20 && game_blocks <= 40) {
    if (two) {
      level_difficulty = 2
      // timeout = 800
      timeout -= 300
      two = false
      addText("Level 2", {
        x:6,
        y:6,
        color: color`0`
      })
    } else {
      clearText()
    }
  } else if (game_blocks > 40 && game_blocks <= 60) {
    if (three) {
      level_difficulty = 3
      // timeout = 500
      timeout -= 200
      addText("Level 3", {
        x:6,
        y:6,
        color: color`0`
      })
      three = false
    } else {
      clearText()
    }
  } else if (game_blocks > 60 && game_blocks <= 100) {
    if (four) {
      level_difficulty = 4
      // timeout = 300
      timeout -= 200
      addText("Level 4", {
        x:6,
        y:6,
        color: color`0`
      })
      four = false
    } else {
      clearText()
    }
  } else if (game_blocks > 100) {
    if (four) {
      level_difficulty = 5
      timeout -= 100
      addText("Level 5", {
        x:6,
        y:6,
        color: color`0`
      })
      four = false
    } else {
      clearText()
    }
  }
}

onInput("a", () => {
  if (game) {
    getFirst(player).x -= 1
    checkCollision()
    if (getAll(player_speed).length > 0) {
      getFirst(player_speed).x = getFirst(player).x
      getFirst(player_speed).y = getFirst(player).y
    }
  }
})

onInput("d", () => {
  if (game) {
    getFirst(player).x += 1
    checkCollision()
    if (getAll(player_speed).length > 0) {
      getFirst(player_speed).x = getFirst(player).x
      getFirst(player_speed).y = getFirst(player).y
    }
  }
})

onInput("w", () => {
  if (game) {
    getFirst(player).y -= 1
    checkCollision()
    if (getAll(player_speed).length > 0) {
      getFirst(player_speed).x = getFirst(player).x
      getFirst(player_speed).y = getFirst(player).y
    }
  }
})

onInput("s", () => {
  if (game) {  
    getFirst(player).y += 1
    checkCollision()
    if (getAll(player_speed).length > 0) {
      getFirst(player_speed).x = getFirst(player).x
      getFirst(player_speed).y = getFirst(player).y
    }
  }
})

addText("Bike Mayhem", {
  x:4,
  y:4,
  color: color`0`
})
addText("WASD to start", {
  x:3,
  y:6,
  color: color`0`
})

afterInput(() => {
  if (game_start) {
      clearText()
      tick()
      game_start = false
    } 
})
